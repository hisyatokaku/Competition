エッジケースに遭遇したら
- 問題をよく読む
- 自分のケースを作りまくる

### ABC158
- E
全列挙が明らかに無理な時はmapを使うことが多い気がする

### ABC100
- D
8方向に全探索すれば最適解になる理由がよくわからない

### ABC102
- D
PとQが互いに近い方が最適だということが腑に落ちなかった。binary searchはbisectを使う。

### ABC086
- D
二次元累積和、座標の簡略化、領域外の点とのmaxをとる。

### ABC137
- D
「真に良い」(全ての条件においてAがBより優れている)選択肢を取っていくのが貪欲法。制約のキツイ後ろから探すことで条件を一個消し、真に良いを作り出すことができる。

### ABC122
- D
三つ前までがわかればよいということを状態にする
初期値の条件が難しかった。NGパターンに何も寄与しない文字を与える。TTTとか。
CCC, AAAでもよいのでは？

### ABC074
- D
    - ワーシャルフロイドの添字kijを間違えて大変なことになった
    - ワーシャルフロイドのiterationでエッジのカットを行う発想がなかった。

### ABC061
- D
    - infを出力 = どこかに閉路がある、と勝手に勘違いした。1 to Nの間に閉路があってもこの問題ではよい。

### ABC062
- D
    - heqpを使う問題。分け目を全探索する発想まではいったが、最初のN要素をheapにつっこんでsequencialに処理する発想がなかった。

### ABC058
- D
    - 数式に落として考える。2乗のループで計算するのではなく、各数が足される回数と引かれる回数を記録する。

### ABC047
- D
    - 安直にstock buy sell problemに置き換えたのがよくない。今回は売買回数に制約があり、一回で最大になる取引を目指すべき。
    例えば1, 2, 4, 3, 5は1の時に買って5の時にうると最大となるのが今回の問題の場合正しいが、1で買い4で売る、3で買い5で売る、としてしまうと、1回で済むはずだった操作が2回にわかれてしまう。1で買い5で売るのを2回やった方が良い。
